/**
* Name: Spatial Operators
* Author: Patrick Taillandier
* Description: Tests various spatial query operators (at_distance, closest_to, inside , overlapping) with continuous and grid topology
* Tags: topology, grid, query, test
*/

model SpatialQueriesTest

species dummy {
	rgb color <- #yellow;
	aspect default {
		draw circle(2) border: #black color: color;
		draw string(int(self)) color: #black;
	}
}
grid cell width: 10 height: 10 neighbors: 4 {
	rgb color <- #white;
	aspect default {
		draw shape border: #black color: color;
		draw string(int(self)) color: #black;
	}
}

global {
	init {
		create dummy with: [location :: {5,5}];
		create dummy with: [location :: {8,9}];
		create dummy with: [location :: {14,6}];
		create dummy with: [location :: {35,55}];
		create dummy with: [location :: {25,75}];
		create dummy with: [location :: {56,80}];
		create dummy with: [location :: {10,70}];
		create dummy with: [location :: {80,8}];
		create dummy with: [location :: {34,78}];
		create dummy with: [location :: {67,32}];
		ask dummy(8) {color<-#red;}
		ask cell(40) {color<-#red;}
	}
}
experiment QueryTests type: test {
	test "closest_to" {
		dummy closest_dummy;
		using topology(world) {
			closest_dummy <- dummy closest_to dummy(8);
		}
		write closest_dummy;
		assert closest_dummy = dummy(4);
		using topology(cell) {
			closest_dummy <- dummy closest_to dummy(8);
		}
		assert closest_dummy = dummy(4);
		
		list<cell> neighborhood;
		loop times: 100 {
			using topology(cell){
				neighborhood<< cell closest_to cell(40);	
			}
		}
		neighborhood <- remove_duplicates(neighborhood);
		assert empty(neighborhood - cell(40).neighbors);
	}
	
	test "neighbors_of" {
		list<agent> cl;
		using topology(world) {
			cl <-  topology(cell(73)) neighbors_of cell(73);
		}
		write cl contains_all [cell(72),cell(83),cell(63),cell(74)] ;
		assert cl contains_all [cell(72),cell(83),cell(63),cell(74)];
	} 
	
	test "agent_closest_to" {
		agent cl;
		using topology(world) {
			cl <-  (agent_closest_to (dummy(8)));
		}
		write cl;
		assert cl = cell(73);
	}
	
	test "agent_farthest_to" {
		dummy farthest_dummy;
		agent cl;
		using topology(world) {
			cl <- ( agent_farthest_to (cell(73)));
		}
		assert cl = cell(9);
	}

	test "agents_inside" {
		list<agent> cl;
		using topology(world) {
			cl <- ( agents_inside (cell(73)));
		}
		assert cl[0] = dummy(8);
		
		using topology(world) {
			cl <- (  agents_inside (cell(73)));
		}
		assert cl[0] = dummy(8);
	}
	
	test "agents_overlapping" {
		list<agent> cl;
		agent cel <- cell(73);
		using topology(world) {
			cl <- (agents_overlapping (dummy(8)));
		}
		assert cl[0] = cel;
	}
	
	/* 
	test "agents_at_distance" {
		list<agent> cl;
		using topology(world) {
			cl <- (agents_at_distance(20));
		}
		write "++--> "+cl;
		//assert cl = ??;
	}
	*/
	
	test "farthest_to with continuous topology"{
		dummy farthest_dummy;
		using topology(world) {
			farthest_dummy <- dummy farthest_to dummy(8);
		}
		assert farthest_dummy = dummy(7);
		
		using topology(cell) {
			farthest_dummy <- dummy farthest_to dummy(8);
		}
		assert farthest_dummy = dummy(7);
		
		cell farthest_cell;
		using topology(cell) {farthest_cell<- cell farthest_to cell(40);}
		assert farthest_cell = cell(99);
	}
	
	test "at_distance" {
		list<agent> neighborhood;
		
		ask dummy(8) {
			neighborhood <- dummy at_distance(30);
		}
		assert empty(neighborhood - [dummy(3),dummy(4),dummy(5),dummy(6)]);
		
		ask dummy(8) {
			using topology(cell) {neighborhood <- dummy at_distance(4);}
		}
		assert empty(neighborhood - [dummy(3),dummy(4),dummy(5),dummy(6)]);
		
		ask cell(40) {
			using topology(cell) {neighborhood <- cell at_distance(2);}
		}
		assert empty(neighborhood - [cell(42),cell(60),cell(30),cell(31),cell(51),cell(50),cell(20),cell(41)]);
	
	}
	
	test "inside" {
		list<dummy> agents_in;
		using topology(world) {
			agents_in <- dummy inside cell(73);
		}
		assert agents_in = [dummy(8)];
	}
	
	test "overlapping" {
		list<dummy> agents_overlapping;
		using topology(world) {
			agents_overlapping <- dummy overlapping cell(73);
		}
		assert agents_overlapping = [dummy(8)];
	}
	
} 

experiment with_visualization type: gui {
	output {
		display map {
			species cell;
			species dummy;
		}	
	}	
}

