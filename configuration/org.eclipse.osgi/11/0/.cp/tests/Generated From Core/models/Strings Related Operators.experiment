/**
 *  Strings Related Operators
 *  Author: GAMA Automatic Generator
 *  Description: Unit tests of operators belonging to "Strings Related Operators".
 */

experiment "Run Tests" type: test {	

	
		test "char" {
			string var0 <- char (34); 	// var0 equals '"'
			assert var0 = '"'; 

		}
	
		test "copy_between" {
			list var0 <-  copy_between ([4, 1, 6, 9 ,7], 1, 3); 	// var0 equals [1, 6]
			assert var0 = [1, 6]; 
			string var1 <- copy_between("abcabcabc", 2,6); 	// var1 equals "cabc"
			assert var1 = "cabc"; 

		}
	
		test "GE" {
			bool var0 <- {5,7} >= {4,6}; 	// var0 equals true
			assert var0 = true; 
			bool var1 <- {5,7} >= {4,8}; 	// var1 equals false
			assert var1 = false; 
			bool var2 <- 'abc' >= 'aeb'; 	// var2 equals false
			assert var2 = false; 
			bool var3 <- 'abc' >= 'abc'; 	// var3 equals true
			assert var3 = true; 
			bool var4 <- 3.5 >= 7; 	// var4 equals false
			assert var4 = false; 
			bool var5 <- #now >= #now minus_hours 1; 	// var5 equals true
			assert var5 = true; 
			bool var6 <- 3 >= 2.5; 	// var6 equals true
			assert var6 = true; 
			bool var7 <- 3 >= 7; 	// var7 equals false
			assert var7 = false; 
			bool var8 <- 3.5 >= 3.5; 	// var8 equals true
			assert var8 = true; 

		}
	
		test "GT" {
			bool var0 <- {5,7} > {4,6}; 	// var0 equals true
			assert var0 = true; 
			bool var1 <- {5,7} > {4,8}; 	// var1 equals false
			assert var1 = false; 
			bool var2 <- 'abc' > 'aeb'; 	// var2 equals false
			assert var2 = false; 
			bool var3 <- 3.5 > 7.6; 	// var3 equals false
			assert var3 = false; 
			bool var4 <- 3.5 > 7; 	// var4 equals false
			assert var4 = false; 
			bool var5 <- 3 > 2.5; 	// var5 equals true
			assert var5 = true; 
			bool var6 <- (#now > (#now minus_hours 1)); 	// var6 equals true
			assert var6 = true; 
			bool var7 <- 13.0 > 7.0; 	// var7 equals true
			assert var7 = true; 

		}
	
		test "indented_by" {
			string var0 <- "my" + indented_by("text", 1); 	// var0 equals "my	text"
			assert var0 = "my	text"; 

		}
	
		test "index_of" {
			point var1 <- matrix([[1,2,3],[4,5,6]]) index_of 4; 	// var1 equals {1.0,0.0}
			assert var1 = {1.0,0.0}; 
			int var2 <-  "abcabcabc" index_of "ca"; 	// var2 equals 2
			assert var2 = 2; 
			int var3 <- [1,2,3,4,5,6] index_of 4; 	// var3 equals 3
			assert var3 = 3; 
			int var4 <- [4,2,3,4,5,4] index_of 4; 	// var4 equals 0
			assert var4 = 0; 
			unknown var0 <- [1::2, 3::4, 5::6] index_of 4; 	// var0 equals 3
			assert var0 = 3; 

		}
	
		test "last_index_of" {
			int var0 <- "abcabcabc" last_index_of "ca"; 	// var0 equals 5
			assert var0 = 5; 
			unknown var1 <- [1::2, 3::4, 5::4] last_index_of 4; 	// var1 equals 5
			assert var1 = 5; 
			int var2 <- [1,2,3,4,5,6] last_index_of 4; 	// var2 equals 3
			assert var2 = 3; 
			int var3 <- [4,2,3,4,5,4] last_index_of 4; 	// var3 equals 5
			assert var3 = 5; 
			point var4 <- matrix([[1,2,3],[4,5,4]]) last_index_of 4; 	// var4 equals {1.0,2.0}
			assert var4 = {1.0,2.0}; 

		}
	
		test "LE" {
			bool var0 <- 'abc' <= 'aeb'; 	// var0 equals true
			assert var0 = true; 
			bool var1 <- {5,7} <= {4,6}; 	// var1 equals false
			assert var1 = false; 
			bool var2 <- {5,7} <= {4,8}; 	// var2 equals false
			assert var2 = false; 
			bool var3 <- 7.0 <= 7; 	// var3 equals true
			assert var3 = true; 
			bool var4 <- (#now <= (#now minus_hours 1)); 	// var4 equals false
			assert var4 = false; 
			bool var5 <- 3 <= 2.5; 	// var5 equals false
			assert var5 = false; 
			bool var6 <- 3.5 <= 3.5; 	// var6 equals true
			assert var6 = true; 
			bool var7 <- 3 <= 7; 	// var7 equals true
			assert var7 = true; 

		}
	
		test "lower_case" {
			string var0 <- lower_case("Abc"); 	// var0 equals 'abc'
			assert var0 = 'abc'; 

		}
	
		test "LT" {
			bool var5 <- 'abc' < 'aeb'; 	// var5 equals true
			assert var5 = true; 
			bool var6 <- {5,7} < {4,6}; 	// var6 equals false
			assert var6 = false; 
			bool var7 <- {5,7} < {4,8}; 	// var7 equals false
			assert var7 = false; 
			bool var0 <- 3 < 7; 	// var0 equals true
			assert var0 = true; 
			bool var1 <- 3 < 2.5; 	// var1 equals false
			assert var1 = false; 
			bool var2 <- 3.5 < 7; 	// var2 equals true
			assert var2 = true; 
			bool var3 <- #now < #now minus_hours 1; 	// var3 equals false
			assert var3 = false; 
			bool var4 <- 3.5 < 7.6; 	// var4 equals true
			assert var4 = true; 

		}
	
		test "replace" {
			string var0 <- replace('to be or not to be,that is the question','to', 'do'); 	// var0 equals 'do be or not do be,that is the question'
			assert var0 = 'do be or not do be,that is the question'; 

		}
	
		test "replace_regex" {
			string var0 <- replace_regex("colour, color", "colou?r", "col"); 	// var0 equals 'col, col'
			assert var0 = 'col, col'; 

		}
	
		test "split_with" {
			list var0 <- 'aa::bb:cc' split_with ('::', true); 	// var0 equals ['aa','bb:cc']
			assert var0 = ['aa','bb:cc']; 
			list var1 <- 'to be or not to be,that is the question' split_with ' ,'; 	// var1 equals ['to','be','or','not','to','be','that','is','the','question']
			assert var1 = ['to','be','or','not','to','be','that','is','the','question']; 

		}
	
		test "upper_case" {
			string var0 <- upper_case("Abc"); 	// var0 equals 'ABC'
			assert var0 = 'ABC'; 

		}
	
}

	