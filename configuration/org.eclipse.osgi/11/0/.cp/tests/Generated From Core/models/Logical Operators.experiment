/**
 *  Logical Operators
 *  Author: GAMA Automatic Generator
 *  Description: Unit tests of operators belonging to "Logical Operators".
 */

experiment "Run Tests" type: test {	

	
		test "and" {
			bool var0 <- true and false; 	// var0 equals false
			assert var0 = false; 
			bool var1 <- false and false; 	// var1 equals false
			assert var1 = false; 
			bool var2 <- false and true; 	// var2 equals false
			assert var2 = false; 
			bool var3 <- true and true; 	// var3 equals true
			assert var3 = true; 
			 int a <-3 ; int b <- 4; int c <- 7;
			bool var5 <- ((a+b) = c ) and ((a+b) > c ); 	// var5 equals false
			assert var5 = false; 

		}
	
		test "ELSEoperator" {
			list<string> var0 <- [10, 19, 43, 12, 7, 22] collect ((each > 20) ? 'above' : 'below'); 	// var0 equals ['below', 'below', 'above', 'below', 'below', 'above']
			assert var0 = ['below', 'below', 'above', 'below', 'below', 'above']; 

		}
	
		test "IFoperator" {
			list<string> var0 <- [10, 19, 43, 12, 7, 22] collect ((each > 20) ? 'above' : 'below'); 	// var0 equals ['below', 'below', 'above', 'below', 'below', 'above']
			assert var0 = ['below', 'below', 'above', 'below', 'below', 'above']; 
			rgb col <- (flip(0.3) ? #red : (flip(0.9) ? #blue : #green));

		}
	
		test "NOunary" {
			bool var0 <- ! (true); 	// var0 equals false
			assert var0 = false; 

		}
	
		test "or" {
			bool var0 <- true or false; 	// var0 equals true
			assert var0 = true; 
			bool var1 <- false or false; 	// var1 equals false
			assert var1 = false; 
			bool var2 <- false or true; 	// var2 equals true
			assert var2 = true; 
			bool var3 <- true or true; 	// var3 equals true
			assert var3 = true; 
			 int a <-3 ; int b <- 4; int c <- 7;
			bool var5 <- ((a+b) = c ) or ((a+b) > c ); 	// var5 equals true
			assert var5 = true; 

		}
	
		test "xor" {
			bool var0 <- xor(true,false); 	// var0 equals true
			assert var0 = true; 
			bool var1 <- xor(false,false); 	// var1 equals false
			assert var1 = false; 
			bool var2 <- xor(false,true); 	// var2 equals true
			assert var2 = true; 
			bool var3 <- xor(true,true); 	// var3 equals false
			assert var3 = false; 
			bool var4 <- true xor true; 	// var4 equals false
			assert var4 = false; 

		}
	
}

	