/**
 *  Containers Related Operators
 *  Author: GAMA Automatic Generator
 *  Description: Unit tests of operators belonging to "Containers Related Operators".
 */

experiment "Run Tests" type: test {	

	
		test "at" {
			int var0 <- [1, 2, 3] at 2; 	// var0 equals 3
			assert var0 = 3; 
			point var1 <- [{1,2}, {3,4}, {5,6}] at 0; 	// var1 equals {1.0,2.0}
			assert var1 = {1.0,2.0}; 
			string var2 <- 'abcdef' at 0; 	// var2 equals 'a'
			assert var2 = 'a'; 

		}
	
		test "contains" {
			bool var0 <- [1, 2, 3] contains 2; 	// var0 equals true
			assert var0 = true; 
			bool var1 <- [{1,2}, {3,4}, {5,6}] contains {3,4}; 	// var1 equals true
			assert var1 = true; 
			bool var2 <- 'abcded' contains 'bc'; 	// var2 equals true
			assert var2 = true; 

		}
	
		test "contains_all" {
			bool var4 <- "abcabcabc" contains_all ["ca","xy"]; 	// var4 equals false
			assert var4 = false; 
			bool var0 <- [1,2,3,4,5,6] contains_all [2,4]; 	// var0 equals true 
			assert var0 = true ; 
			bool var1 <- [1,2,3,4,5,6] contains_all [2,8]; 	// var1 equals false
			assert var1 = false; 
			bool var2 <- [1::2, 3::4, 5::6] contains_all [1,3]; 	// var2 equals false 
			assert var2 = false ; 
			bool var3 <- [1::2, 3::4, 5::6] contains_all [2,4]; 	// var3 equals true
			assert var3 = true; 

		}
	
		test "contains_any" {
			bool var0 <- "abcabcabc" contains_any ["ca","xy"]; 	// var0 equals true
			assert var0 = true; 
			bool var1 <- [1,2,3,4,5,6] contains_any [2,4]; 	// var1 equals true 
			assert var1 = true ; 
			bool var2 <- [1,2,3,4,5,6] contains_any [2,8]; 	// var2 equals true
			assert var2 = true; 
			bool var3 <- [1::2, 3::4, 5::6] contains_any [1,3]; 	// var3 equals false
			assert var3 = false; 
			bool var4 <- [1::2, 3::4, 5::6] contains_any [2,4]; 	// var4 equals true
			assert var4 = true; 

		}
	
		test "contains_key" {
			bool var0 <- [1, 2, 3] contains_key 3; 	// var0 equals false
			assert var0 = false; 
			bool var1 <- [{1,2}, {3,4}, {5,6}] contains_key 0; 	// var1 equals true
			assert var1 = true; 

		}
	
		test "distinct" {
			list var1 <- remove_duplicates([]); 	// var1 equals []
			assert var1 = []; 
			list var2 <- remove_duplicates([1::3,2::4,3::3,5::7]); 	// var2 equals [3,4,7]
			assert var2 = [3,4,7]; 
			list var3 <- remove_duplicates([["c11","c12","c13","c13"],["c21","c22","c23","c23"]]); 	// var3 equals [["c11","c12","c13","c21","c22","c23"]]
			list var0 <- remove_duplicates([3,2,5,1,2,3,5,5,5]); 	// var0 equals [3,2,5,1]
			assert var0 = [3,2,5,1]; 

		}
	
		test "empty" {
			bool var0 <- empty ('abced'); 	// var0 equals false
			assert var0 = false; 
			bool var1 <- empty([]); 	// var1 equals true
			assert var1 = true; 

		}
	
		test "first" {
			string var0 <- first ('abce'); 	// var0 equals 'a'
			assert var0 = 'a'; 
			int var1 <- first ([1, 2, 3]); 	// var1 equals 1
			assert var1 = 1; 

		}
	
		test "in" {
			bool var0 <- 2 in [1,2,3,4,5,6]; 	// var0 equals true
			assert var0 = true; 
			bool var1 <- 7 in [1,2,3,4,5,6]; 	// var1 equals false
			assert var1 = false; 
			bool var2 <- 3 in [1::2, 3::4, 5::6]; 	// var2 equals false
			assert var2 = false; 
			bool var3 <- 6 in [1::2, 3::4, 5::6]; 	// var3 equals true
			assert var3 = true; 
			bool var4 <-  'bc' in 'abcded'; 	// var4 equals true
			assert var4 = true; 

		}
	
		test "interleave" {
			list var0 <- interleave([1,2,4,3,5,7,6,8]); 	// var0 equals [1,2,4,3,5,7,6,8]
			assert var0 = [1,2,4,3,5,7,6,8]; 
			list var1 <- interleave([['e11','e12','e13'],['e21','e22','e23'],['e31','e32','e33']]); 	// var1 equals ['e11','e21','e31','e12','e22','e32','e13','e23','e33']
			assert var1 = ['e11','e21','e31','e12','e22','e32','e13','e23','e33']; 

		}
	
		test "last" {
			int var0 <- last ([1, 2, 3]); 	// var0 equals 3
			assert var0 = 3; 
			string var1 <- last ('abce'); 	// var1 equals 'e'
			assert var1 = 'e'; 

		}
	
		test "length" {
			int var0 <- length([12,13]); 	// var0 equals 2
			assert var0 = 2; 
			int var1 <- length([]); 	// var1 equals 0
			assert var1 = 0; 
			int var2 <- length(matrix([["c11","c12","c13"],["c21","c22","c23"]])); 	// var2 equals 6
			assert var2 = 6; 
			int var3 <- length ('I am an agent'); 	// var3 equals 13
			assert var3 = 13; 

		}
	
		test "one_of" {
			unknown var0 <- one_of([]); 	// var0 equals nil
			assert var0 = nil; 
			int i <- any ([1,2,3]); 	// i equals 1, 2 or 3
			bool var2 <- [1,2,3] contains i; 	// var2 equals true
			assert var2 = true; 
			string sMat <- one_of(matrix([["c11","c12","c13"],["c21","c22","c23"]])); 	// sMat equals "c11","c12","c13", "c21","c22" or "c23"
			bool var4 <- matrix([["c11","c12","c13"],["c21","c22","c23"]]) contains sMat; 	// var4 equals true
			assert var4 = true; 
			int im <- one_of ([2::3, 4::5, 6::7]);	// im equals 3, 5 or 7
			bool var6 <- [2::3, 4::5, 6::7].values contains im; 	// var6 equals true
			assert var6 = true; 
			agent b <- one_of(agents);
			//bug b <- one_of(bug);  	// Given a previously defined species bug, b is one of the created bugs, e.g. bug3

		}
	
		test "range" {
			list var0 <- range(0,2); 	// var0 equals [0,1,2]
			assert var0 = [0,1,2]; 

		}
	
		test "reverse" {
			string var0 <- reverse ('abcd'); 	// var0 equals 'dcba'
			assert var0 = 'dcba'; 
			list<int> var1 <- reverse ([10,12,14]); 	// var1 equals [14, 12, 10]
			assert var1 = [14, 12, 10]; 
			map<int,string> var2 <- reverse (['k1'::44, 'k2'::32, 'k3'::12]); 	// var2 equals [44::'k1', 32::'k2', 12::'k3']
			assert var2 = [44::'k1', 32::'k2', 12::'k3']; 
			matrix<string> var3 <- reverse(matrix([["c11","c12","c13"],["c21","c22","c23"]])); 	// var3 equals matrix([["c11","c21"],["c12","c22"],["c13","c23"]])
			assert var3 = matrix([["c11","c21"],["c12","c22"],["c13","c23"]]); 
			map<int,int> m <- [1::111,2::222, 3::333, 4::444];
			map var5 <- reverse(m); 	// var5 equals map([111::1,222::2,333::3,444::4])
			assert var5 = map([111::1,222::2,333::3,444::4]); 

		}
	
}

	