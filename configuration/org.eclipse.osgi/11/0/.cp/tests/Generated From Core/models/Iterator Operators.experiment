/**
 *  Iterator Operators
 *  Author: GAMA Automatic Generator
 *  Description: Unit tests of operators belonging to "Iterator Operators".
 */

experiment "Run Tests" type: test {	

	
		test "accumulate" {
			//list var0 <- [a1,a2,a3] accumulate (each neighbors_at 10); 	// var0 equals a flat list of all the neighbors of these three agents
			list<int> var1 <- [1,2,4] accumulate ([2,4]); 	// var1 equals [2,4,2,4,2,4]
			assert var1 = [2,4,2,4,2,4]; 
			list<int> var2 <- [1,2,4] accumulate (each * 2); 	// var2 equals [2,4,8]
			assert var2 = [2,4,8]; 

		}
	
		test "all_match" {
			bool var0 <- [1,2,3,4,5,6,7,8] all_match (each > 3); 	// var0 equals false
			assert var0 = false; 
			bool var1 <- [1::2, 3::4, 5::6] all_match (each > 4); 	// var1 equals false
			assert var1 = false; 

		}
	
		test "as_map" {
			map<int,int> var0 <- [1,2,3,4,5,6,7,8] as_map (each::(each * 2)); 	// var0 equals [1::2, 2::4, 3::6, 4::8, 5::10, 6::12, 7::14, 8::16]
			assert var0 = [1::2, 2::4, 3::6, 4::8, 5::10, 6::12, 7::14, 8::16]; 
			map<int,int> var1 <- [1::2,3::4,5::6] as_map (each::(each * 2)); 	// var1 equals [2::4, 4::8, 6::12] 
			assert var1 = [2::4, 4::8, 6::12] ; 

		}
	
		test "collect" {
			list var0 <- [1,2,4] collect (each *2); 	// var0 equals [2,4,8]
			assert var0 = [2,4,8]; 
			list var1 <- [1,2,4] collect ([2,4]); 	// var1 equals [[2,4],[2,4],[2,4]]
			assert var1 = [[2,4],[2,4],[2,4]]; 
			list var2 <- [1::2, 3::4, 5::6] collect (each + 2); 	// var2 equals [4,6,8]
			assert var2 = [4,6,8]; 
			//list var3 <- (list(node) collect (node(each).location.x * 2); 	// var3 equals the list of nodes with their x multiplied by 2

		}
	
		test "count" {
			int var0 <- [1,2,3,4,5,6,7,8] count (each > 3); 	// var0 equals 5
			assert var0 = 5; 
			// Number of nodes of graph g2 without any out edge
			graph g2 <- graph([]);
			int var3 <- g2 count (length(g2 out_edges_of each) = 0  ) ; 	// var3 equals the total number of out edges
			// Number of agents node with x > 32
			//int n <- (list(node) count (round(node(each).location.x) > 32);
			int var6 <- [1::2, 3::4, 5::6] count (each > 4); 	// var6 equals 1
			assert var6 = 1; 

		}
	
		test "create_map" {
			map<int,string> var0 <- create_map([0,1,2],['a','b','c']); 	// var0 equals [0::'a',1::'b',2::'c']
			assert var0 = [0::'a',1::'b',2::'c']; 
			map<int,float> var1 <- create_map([0,1],[0.1,0.2,0.3]); 	// var1 equals [0::0.1,1::0.2]
			assert var1 = [0::0.1,1::0.2]; 
			map<string,float> var2 <- create_map(['a','b','c','d'],[1.0,2.0,3.0]); 	// var2 equals ['a'::1.0,'b'::2.0,'c'::3.0]
			assert var2 = ['a'::1.0,'b'::2.0,'c'::3.0]; 

		}
	
		test "first_with" {
			unknown var4 <- [1::2, 3::4, 5::6] first_with (each >= 4); 	// var4 equals 4
			assert var4 = 4; 
			unknown var5 <- [1::2, 3::4, 5::6].pairs first_with (each.value >= 4); 	// var5 equals (3::4)
			assert var5 = (3::4); 
			unknown var0 <- [1,2,3,4,5,6,7,8] first_with (each > 3); 	// var0 equals 4
			assert var0 = 4; 
			graph g2 <- graph([]);
			unknown var2 <- g2 first_with (length(g2 out_edges_of each) = 0); 	// var2 equals node9
			//unknown var3 <- (list(node) first_with (round(node(each).location.x) > 32); 	// var3 equals node2

		}
	
		test "frequency_of" {
			map var0 <- [1, 2, 3, 3, 4, 4, 5, 3, 3, 4] frequency_of each; 	// var0 equals map([1::1,2::1,3::4,4::3,5::1])
			assert var0 = map([1::1,2::1,3::4,4::3,5::1]); 

		}
	
		test "group_by" {
			map var0 <- [1,2,3,4,5,6,7,8] group_by (each > 3); 	// var0 equals [false::[1, 2, 3], true::[4, 5, 6, 7, 8]]
			assert var0 = [false::[1, 2, 3], true::[4, 5, 6, 7, 8]]; 
			//map var1 <- g2 group_by (length(g2 out_edges_of each) ); 	// var1 equals [ 0::[node9, node7, node10, node8, node11], 1::[node6], 2::[node5], 3::[node4]]
			//map var2 <- (list(node) group_by (round(node(each).location.x)); 	// var2 equals [32::[node5], 21::[node1], 4::[node0], 66::[node2], 96::[node3]]
			map<bool,list> var3 <- [1::2, 3::4, 5::6] group_by (each > 4); 	// var3 equals [false::[2, 4], true::[6]]
			assert var3 = [false::[2, 4], true::[6]]; 

		}
	
		test "index_by" {
			map var0 <- [1,2,3,4,5,6,7,8] index_by (each - 1); 	// var0 equals [0::1, 1::2, 2::3, 3::4, 4::5, 5::6, 6::7, 7::8]
			assert var0 = [0::1, 1::2, 2::3, 3::4, 4::5, 5::6, 6::7, 7::8]; 

		}
	
		test "last_with" {
			unknown var4 <- [1::2, 3::4, 5::6] last_with (each >= 4); 	// var4 equals 6
			assert var4 = 6; 
			unknown var5 <- [1::2, 3::4, 5::6].pairs last_with (each.value >= 4); 	// var5 equals (5::6)
			assert var5 = (5::6); 
			unknown var0 <- [1,2,3,4,5,6,7,8] last_with (each > 3); 	// var0 equals 8
			assert var0 = 8; 
			graph g2 <- graph([]);
			//unknown var2 <- g2 last_with (length(g2 out_edges_of each) = 0 ); 	// var2 equals node11
			//unknown var3 <- (list(node) last_with (round(node(each).location.x) > 32); 	// var3 equals node3

		}
	
		test "max_of" {
			unknown var4 <- [1::2, 3::4, 5::6] max_of (each + 3); 	// var4 equals 9
			assert var4 = 9; 
			unknown var0 <- [1,2,4,3,5,7,6,8] max_of (each * 100 ); 	// var0 equals 800
			assert var0 = 800; 
			graph g2 <- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]);
			unknown var2 <- g2.vertices max_of (g2 degree_of( each )); 	// var2 equals 2
			assert var2 = 2; 
			//unknown var3 <- (list(node) max_of (round(node(each).location.x)); 	// var3 equals 96

		}
	
		test "mean_of" {
			unknown var1 <- [1::2, 3::4, 5::6] mean_of (each); 	// var1 equals 4
			assert var1 = 4; 
			unknown var0 <- [1,2] mean_of (each * 10 ); 	// var0 equals 15
			assert var0 = 15; 

		}
	
		test "min_of" {
			unknown var4 <- [1::2, 3::4, 5::6] min_of (each + 3); 	// var4 equals 5
			assert var4 = 5; 
			unknown var0 <- [1,2,4,3,5,7,6,8] min_of (each * 100 ); 	// var0 equals 100
			assert var0 = 100; 
			graph g2 <- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]);
			unknown var2 <- g2 min_of (length(g2 out_edges_of each) ); 	// var2 equals 0
			assert var2 = 0; 
			//unknown var3 <- (list(node) min_of (round(node(each).location.x)); 	// var3 equals 4

		}
	
		test "none_matches" {
			bool var0 <- [1,2,3,4,5,6,7,8] none_matches (each > 3); 	// var0 equals false
			assert var0 = false; 
			bool var1 <- [1::2, 3::4, 5::6] none_matches (each > 4); 	// var1 equals false
			assert var1 = false; 

		}
	
		test "one_matches" {
			bool var0 <- [1,2,3,4,5,6,7,8] one_matches (each > 3); 	// var0 equals true
			assert var0 = true; 
			bool var1 <- [1::2, 3::4, 5::6] one_matches (each > 4); 	// var1 equals true
			assert var1 = true; 

		}
	
		test "product_of" {
			unknown var1 <- [1::2, 3::4, 5::6] product_of (each); 	// var1 equals 48
			assert var1 = 48; 
			unknown var0 <- [1,2] product_of (each * 10 ); 	// var0 equals 200
			assert var0 = 200; 

		}
	
		test "sort_by" {
			list var0 <- [1,2,4,3,5,7,6,8] sort_by (each); 	// var0 equals [1,2,3,4,5,6,7,8]
			assert var0 = [1,2,3,4,5,6,7,8]; 
			graph g2 <- graph([]);
			list var2 <- g2 sort_by (length(g2 out_edges_of each) ); 	// var2 equals [node9, node7, node10, node8, node11, node6, node5, node4]
			//list var3 <- (list(node) sort_by (round(node(each).location.x)); 	// var3 equals [node5, node1, node0, node2, node3]
			list var4 <- [1::2, 5::6, 3::4] sort_by (each); 	// var4 equals [2, 4, 6]
			assert var4 = [2, 4, 6]; 

		}
	
		test "sum_of" {
			unknown var1 <- [1::2, 3::4, 5::6] sum_of (each + 3); 	// var1 equals 21
			assert var1 = 21; 
			unknown var0 <- [1,2] sum_of (each * 100 ); 	// var0 equals 300
			assert var0 = 300; 

		}
	
		test "variance_of" {
			float var0 <- [1,2,3,4,5,6] variance_of each with_precision 2; 	// var0 equals 2.92
			assert var0 = 2.92; 

		}
	
		test "where" {
			list var4 <- [1::2, 3::4, 5::6] where (each >= 4); 	// var4 equals [4, 6]
			assert var4 = [4, 6]; 
			list var0 <- [1,2,3,4,5,6,7,8] where (each > 3); 	// var0 equals [4, 5, 6, 7, 8] 
			assert var0 = [4, 5, 6, 7, 8] ; 
			graph g2 <- graph([]);
			list var2 <- g2 where (length(g2 out_edges_of each) = 0 ); 	// var2 equals [node9, node7, node10, node8, node11]
			//list var3 <- (list(node) where (round(node(each).location.x) > 32); 	// var3 equals [node2, node3]

		}
	
		test "with_max_of" {
			unknown var0 <- [1,2,3,4,5,6,7,8] with_max_of (each ); 	// var0 equals 8
			assert var0 = 8; 
			graph g2 <- graph([]);
			unknown var2 <- g2 with_max_of (length(g2 out_edges_of each)  ) ; 	// var2 equals node4
			//unknown var3 <- (list(node) with_max_of (round(node(each).location.x)); 	// var3 equals node3
			unknown var4 <- [1::2, 3::4, 5::6] with_max_of (each); 	// var4 equals 6
			assert var4 = 6; 

		}
	
		test "with_min_of" {
			unknown var0 <- [1,2,3,4,5,6,7,8] with_min_of (each ); 	// var0 equals 1
			assert var0 = 1; 
			graph g2 <- graph([]);
			unknown var2 <- g2 with_min_of (length(g2 out_edges_of each)  ); 	// var2 equals node11
			//unknown var3 <- (list(node) with_min_of (round(node(each).location.x)); 	// var3 equals node0
			unknown var4 <- [1::2, 3::4, 5::6] with_min_of (each); 	// var4 equals 2
			assert var4 = 2; 

		}
	
}

	